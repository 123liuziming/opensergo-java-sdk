// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: specification/proto/servicecontract.proto

package com.alibaba.opensergo.api.proto;

/**
 * Protobuf type {@code opensergo.api.FieldOptions}
 */
public final class FieldOptions extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:opensergo.api.FieldOptions)
    FieldOptionsOrBuilder {
private static final long serialVersionUID = 0L;
  // Use FieldOptions.newBuilder() to construct.
  private FieldOptions(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private FieldOptions() {
    ctype_ = 0;
    jstype_ = 0;
    uninterpretedOption_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new FieldOptions();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private FieldOptions(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 8: {
            int rawValue = input.readEnum();
            bitField0_ |= 0x00000001;
            ctype_ = rawValue;
            break;
          }
          case 16: {
            bitField0_ |= 0x00000002;
            packed_ = input.readBool();
            break;
          }
          case 24: {
            bitField0_ |= 0x00000020;
            deprecated_ = input.readBool();
            break;
          }
          case 40: {
            bitField0_ |= 0x00000008;
            lazy_ = input.readBool();
            break;
          }
          case 48: {
            int rawValue = input.readEnum();
            bitField0_ |= 0x00000004;
            jstype_ = rawValue;
            break;
          }
          case 80: {
            bitField0_ |= 0x00000040;
            weak_ = input.readBool();
            break;
          }
          case 120: {
            bitField0_ |= 0x00000010;
            unverifiedLazy_ = input.readBool();
            break;
          }
          case 7994: {
            if (!((mutable_bitField0_ & 0x00000080) != 0)) {
              uninterpretedOption_ = new java.util.ArrayList<com.alibaba.opensergo.api.proto.UninterpretedOption>();
              mutable_bitField0_ |= 0x00000080;
            }
            uninterpretedOption_.add(
                input.readMessage(com.alibaba.opensergo.api.proto.UninterpretedOption.parser(), extensionRegistry));
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000080) != 0)) {
        uninterpretedOption_ = java.util.Collections.unmodifiableList(uninterpretedOption_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.alibaba.opensergo.api.proto.Servicecontract.internal_static_opensergo_api_FieldOptions_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.alibaba.opensergo.api.proto.Servicecontract.internal_static_opensergo_api_FieldOptions_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.alibaba.opensergo.api.proto.FieldOptions.class, com.alibaba.opensergo.api.proto.FieldOptions.Builder.class);
  }

  /**
   * Protobuf enum {@code opensergo.api.FieldOptions.CType}
   */
  public enum CType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Default mode.
     * </pre>
     *
     * <code>STRING = 0;</code>
     */
    STRING(0),
    /**
     * <code>CORD = 1;</code>
     */
    CORD(1),
    /**
     * <code>STRING_PIECE = 2;</code>
     */
    STRING_PIECE(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Default mode.
     * </pre>
     *
     * <code>STRING = 0;</code>
     */
    public static final int STRING_VALUE = 0;
    /**
     * <code>CORD = 1;</code>
     */
    public static final int CORD_VALUE = 1;
    /**
     * <code>STRING_PIECE = 2;</code>
     */
    public static final int STRING_PIECE_VALUE = 2;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static CType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static CType forNumber(int value) {
      switch (value) {
        case 0: return STRING;
        case 1: return CORD;
        case 2: return STRING_PIECE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<CType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        CType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<CType>() {
            public CType findValueByNumber(int number) {
              return CType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.alibaba.opensergo.api.proto.FieldOptions.getDescriptor().getEnumTypes().get(0);
    }

    private static final CType[] VALUES = values();

    public static CType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private CType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:opensergo.api.FieldOptions.CType)
  }

  /**
   * Protobuf enum {@code opensergo.api.FieldOptions.JSType}
   */
  public enum JSType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Use the default type.
     * </pre>
     *
     * <code>JS_NORMAL = 0;</code>
     */
    JS_NORMAL(0),
    /**
     * <pre>
     * Use JavaScript strings.
     * </pre>
     *
     * <code>JS_STRING = 1;</code>
     */
    JS_STRING(1),
    /**
     * <pre>
     * Use JavaScript numbers.
     * </pre>
     *
     * <code>JS_NUMBER = 2;</code>
     */
    JS_NUMBER(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Use the default type.
     * </pre>
     *
     * <code>JS_NORMAL = 0;</code>
     */
    public static final int JS_NORMAL_VALUE = 0;
    /**
     * <pre>
     * Use JavaScript strings.
     * </pre>
     *
     * <code>JS_STRING = 1;</code>
     */
    public static final int JS_STRING_VALUE = 1;
    /**
     * <pre>
     * Use JavaScript numbers.
     * </pre>
     *
     * <code>JS_NUMBER = 2;</code>
     */
    public static final int JS_NUMBER_VALUE = 2;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static JSType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static JSType forNumber(int value) {
      switch (value) {
        case 0: return JS_NORMAL;
        case 1: return JS_STRING;
        case 2: return JS_NUMBER;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<JSType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        JSType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<JSType>() {
            public JSType findValueByNumber(int number) {
              return JSType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.alibaba.opensergo.api.proto.FieldOptions.getDescriptor().getEnumTypes().get(1);
    }

    private static final JSType[] VALUES = values();

    public static JSType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private JSType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:opensergo.api.FieldOptions.JSType)
  }

  private int bitField0_;
  public static final int CTYPE_FIELD_NUMBER = 1;
  private int ctype_;
  /**
   * <pre>
   * The ctype option instructs the C++ code generator to use a different
   * representation of the field than it normally would.  See the specific
   * options below.  This option is not yet implemented in the open source
   * release -- sorry, we'll try to include it in a future version!
   * </pre>
   *
   * <code>optional .opensergo.api.FieldOptions.CType ctype = 1;</code>
   * @return Whether the ctype field is set.
   */
  @java.lang.Override public boolean hasCtype() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * The ctype option instructs the C++ code generator to use a different
   * representation of the field than it normally would.  See the specific
   * options below.  This option is not yet implemented in the open source
   * release -- sorry, we'll try to include it in a future version!
   * </pre>
   *
   * <code>optional .opensergo.api.FieldOptions.CType ctype = 1;</code>
   * @return The enum numeric value on the wire for ctype.
   */
  @java.lang.Override public int getCtypeValue() {
    return ctype_;
  }
  /**
   * <pre>
   * The ctype option instructs the C++ code generator to use a different
   * representation of the field than it normally would.  See the specific
   * options below.  This option is not yet implemented in the open source
   * release -- sorry, we'll try to include it in a future version!
   * </pre>
   *
   * <code>optional .opensergo.api.FieldOptions.CType ctype = 1;</code>
   * @return The ctype.
   */
  @java.lang.Override public com.alibaba.opensergo.api.proto.FieldOptions.CType getCtype() {
    @SuppressWarnings("deprecation")
    com.alibaba.opensergo.api.proto.FieldOptions.CType result = com.alibaba.opensergo.api.proto.FieldOptions.CType.valueOf(ctype_);
    return result == null ? com.alibaba.opensergo.api.proto.FieldOptions.CType.UNRECOGNIZED : result;
  }

  public static final int PACKED_FIELD_NUMBER = 2;
  private boolean packed_;
  /**
   * <pre>
   * The packed option can be enabled for repeated primitive fields to enable
   * a more efficient representation on the wire. Rather than repeatedly
   * writing the tag and type for each element, the entire array is encoded as
   * a single length-delimited blob. In proto3, only explicit setting it to
   * false will avoid using packed encoding.
   * </pre>
   *
   * <code>optional bool packed = 2;</code>
   * @return Whether the packed field is set.
   */
  @java.lang.Override
  public boolean hasPacked() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * The packed option can be enabled for repeated primitive fields to enable
   * a more efficient representation on the wire. Rather than repeatedly
   * writing the tag and type for each element, the entire array is encoded as
   * a single length-delimited blob. In proto3, only explicit setting it to
   * false will avoid using packed encoding.
   * </pre>
   *
   * <code>optional bool packed = 2;</code>
   * @return The packed.
   */
  @java.lang.Override
  public boolean getPacked() {
    return packed_;
  }

  public static final int JSTYPE_FIELD_NUMBER = 6;
  private int jstype_;
  /**
   * <pre>
   * The jstype option determines the JavaScript type used for values of the
   * field.  The option is permitted only for 64 bit integral and fixed types
   * (int64, uint64, sint64, fixed64, sfixed64).  A field with jstype JS_STRING
   * is represented as JavaScript string, which avoids loss of precision that
   * can happen when a large value is converted to a floating point JavaScript.
   * Specifying JS_NUMBER for the jstype causes the generated JavaScript code to
   * use the JavaScript "number" type.  The behavior of the default option
   * JS_NORMAL is implementation dependent.
   * This option is an enum to permit additional types to be added, e.g.
   * goog.math.Integer.
   * </pre>
   *
   * <code>optional .opensergo.api.FieldOptions.JSType jstype = 6;</code>
   * @return Whether the jstype field is set.
   */
  @java.lang.Override public boolean hasJstype() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   * The jstype option determines the JavaScript type used for values of the
   * field.  The option is permitted only for 64 bit integral and fixed types
   * (int64, uint64, sint64, fixed64, sfixed64).  A field with jstype JS_STRING
   * is represented as JavaScript string, which avoids loss of precision that
   * can happen when a large value is converted to a floating point JavaScript.
   * Specifying JS_NUMBER for the jstype causes the generated JavaScript code to
   * use the JavaScript "number" type.  The behavior of the default option
   * JS_NORMAL is implementation dependent.
   * This option is an enum to permit additional types to be added, e.g.
   * goog.math.Integer.
   * </pre>
   *
   * <code>optional .opensergo.api.FieldOptions.JSType jstype = 6;</code>
   * @return The enum numeric value on the wire for jstype.
   */
  @java.lang.Override public int getJstypeValue() {
    return jstype_;
  }
  /**
   * <pre>
   * The jstype option determines the JavaScript type used for values of the
   * field.  The option is permitted only for 64 bit integral and fixed types
   * (int64, uint64, sint64, fixed64, sfixed64).  A field with jstype JS_STRING
   * is represented as JavaScript string, which avoids loss of precision that
   * can happen when a large value is converted to a floating point JavaScript.
   * Specifying JS_NUMBER for the jstype causes the generated JavaScript code to
   * use the JavaScript "number" type.  The behavior of the default option
   * JS_NORMAL is implementation dependent.
   * This option is an enum to permit additional types to be added, e.g.
   * goog.math.Integer.
   * </pre>
   *
   * <code>optional .opensergo.api.FieldOptions.JSType jstype = 6;</code>
   * @return The jstype.
   */
  @java.lang.Override public com.alibaba.opensergo.api.proto.FieldOptions.JSType getJstype() {
    @SuppressWarnings("deprecation")
    com.alibaba.opensergo.api.proto.FieldOptions.JSType result = com.alibaba.opensergo.api.proto.FieldOptions.JSType.valueOf(jstype_);
    return result == null ? com.alibaba.opensergo.api.proto.FieldOptions.JSType.UNRECOGNIZED : result;
  }

  public static final int LAZY_FIELD_NUMBER = 5;
  private boolean lazy_;
  /**
   * <pre>
   * Should this field be parsed lazily?  Lazy applies only to message-type
   * fields.  It means that when the outer message is initially parsed, the
   * inner message's contents will not be parsed but instead stored in encoded
   * form.  The inner message will actually be parsed when it is first accessed.
   * This is only a hint.  Implementations are free to choose whether to use
   * eager or lazy parsing regardless of the value of this option.  However,
   * setting this option true suggests that the protocol author believes that
   * using lazy parsing on this field is worth the additional bookkeeping
   * overhead typically needed to implement it.
   * This option does not affect the public interface of any generated code;
   * all method signatures remain the same.  Furthermore, thread-safety of the
   * interface is not affected by this option; const methods remain safe to
   * call from multiple threads concurrently, while non-const methods continue
   * to require exclusive access.
   * Note that implementations may choose not to check required fields within
   * a lazy sub-message.  That is, calling IsInitialized() on the outer message
   * may return true even if the inner message has missing required fields.
   * This is necessary because otherwise the inner message would have to be
   * parsed in order to perform the check, defeating the purpose of lazy
   * parsing.  An implementation which chooses not to check required fields
   * must be consistent about it.  That is, for any particular sub-message, the
   * implementation must either *always* check its required fields, or *never*
   * check its required fields, regardless of whether or not the message has
   * been parsed.
   * As of 2021, lazy does no correctness checks on the byte stream during
   * parsing.  This may lead to crashes if and when an invalid byte stream is
   * finally parsed upon access.
   * TODO(b/211906113):  Enable validation on lazy fields.
   * </pre>
   *
   * <code>optional bool lazy = 5;</code>
   * @return Whether the lazy field is set.
   */
  @java.lang.Override
  public boolean hasLazy() {
    return ((bitField0_ & 0x00000008) != 0);
  }
  /**
   * <pre>
   * Should this field be parsed lazily?  Lazy applies only to message-type
   * fields.  It means that when the outer message is initially parsed, the
   * inner message's contents will not be parsed but instead stored in encoded
   * form.  The inner message will actually be parsed when it is first accessed.
   * This is only a hint.  Implementations are free to choose whether to use
   * eager or lazy parsing regardless of the value of this option.  However,
   * setting this option true suggests that the protocol author believes that
   * using lazy parsing on this field is worth the additional bookkeeping
   * overhead typically needed to implement it.
   * This option does not affect the public interface of any generated code;
   * all method signatures remain the same.  Furthermore, thread-safety of the
   * interface is not affected by this option; const methods remain safe to
   * call from multiple threads concurrently, while non-const methods continue
   * to require exclusive access.
   * Note that implementations may choose not to check required fields within
   * a lazy sub-message.  That is, calling IsInitialized() on the outer message
   * may return true even if the inner message has missing required fields.
   * This is necessary because otherwise the inner message would have to be
   * parsed in order to perform the check, defeating the purpose of lazy
   * parsing.  An implementation which chooses not to check required fields
   * must be consistent about it.  That is, for any particular sub-message, the
   * implementation must either *always* check its required fields, or *never*
   * check its required fields, regardless of whether or not the message has
   * been parsed.
   * As of 2021, lazy does no correctness checks on the byte stream during
   * parsing.  This may lead to crashes if and when an invalid byte stream is
   * finally parsed upon access.
   * TODO(b/211906113):  Enable validation on lazy fields.
   * </pre>
   *
   * <code>optional bool lazy = 5;</code>
   * @return The lazy.
   */
  @java.lang.Override
  public boolean getLazy() {
    return lazy_;
  }

  public static final int UNVERIFIED_LAZY_FIELD_NUMBER = 15;
  private boolean unverifiedLazy_;
  /**
   * <pre>
   * unverified_lazy does no correctness checks on the byte stream. This should
   * only be used where lazy with verification is prohibitive for performance
   * reasons.
   * </pre>
   *
   * <code>optional bool unverified_lazy = 15;</code>
   * @return Whether the unverifiedLazy field is set.
   */
  @java.lang.Override
  public boolean hasUnverifiedLazy() {
    return ((bitField0_ & 0x00000010) != 0);
  }
  /**
   * <pre>
   * unverified_lazy does no correctness checks on the byte stream. This should
   * only be used where lazy with verification is prohibitive for performance
   * reasons.
   * </pre>
   *
   * <code>optional bool unverified_lazy = 15;</code>
   * @return The unverifiedLazy.
   */
  @java.lang.Override
  public boolean getUnverifiedLazy() {
    return unverifiedLazy_;
  }

  public static final int DEPRECATED_FIELD_NUMBER = 3;
  private boolean deprecated_;
  /**
   * <pre>
   * Is this field deprecated?
   * Depending on the target platform, this can emit Deprecated annotations
   * for accessors, or it will be completely ignored; in the very least, this
   * is a formalization for deprecating fields.
   * </pre>
   *
   * <code>optional bool deprecated = 3;</code>
   * @return Whether the deprecated field is set.
   */
  @java.lang.Override
  public boolean hasDeprecated() {
    return ((bitField0_ & 0x00000020) != 0);
  }
  /**
   * <pre>
   * Is this field deprecated?
   * Depending on the target platform, this can emit Deprecated annotations
   * for accessors, or it will be completely ignored; in the very least, this
   * is a formalization for deprecating fields.
   * </pre>
   *
   * <code>optional bool deprecated = 3;</code>
   * @return The deprecated.
   */
  @java.lang.Override
  public boolean getDeprecated() {
    return deprecated_;
  }

  public static final int WEAK_FIELD_NUMBER = 10;
  private boolean weak_;
  /**
   * <pre>
   * For Google-internal migration only. Do not use.
   * </pre>
   *
   * <code>optional bool weak = 10;</code>
   * @return Whether the weak field is set.
   */
  @java.lang.Override
  public boolean hasWeak() {
    return ((bitField0_ & 0x00000040) != 0);
  }
  /**
   * <pre>
   * For Google-internal migration only. Do not use.
   * </pre>
   *
   * <code>optional bool weak = 10;</code>
   * @return The weak.
   */
  @java.lang.Override
  public boolean getWeak() {
    return weak_;
  }

  public static final int UNINTERPRETED_OPTION_FIELD_NUMBER = 999;
  private java.util.List<com.alibaba.opensergo.api.proto.UninterpretedOption> uninterpretedOption_;
  /**
   * <pre>
   * The parser stores options it doesn't recognize here. See above.
   * </pre>
   *
   * <code>repeated .opensergo.api.UninterpretedOption uninterpreted_option = 999;</code>
   */
  @java.lang.Override
  public java.util.List<com.alibaba.opensergo.api.proto.UninterpretedOption> getUninterpretedOptionList() {
    return uninterpretedOption_;
  }
  /**
   * <pre>
   * The parser stores options it doesn't recognize here. See above.
   * </pre>
   *
   * <code>repeated .opensergo.api.UninterpretedOption uninterpreted_option = 999;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.alibaba.opensergo.api.proto.UninterpretedOptionOrBuilder> 
      getUninterpretedOptionOrBuilderList() {
    return uninterpretedOption_;
  }
  /**
   * <pre>
   * The parser stores options it doesn't recognize here. See above.
   * </pre>
   *
   * <code>repeated .opensergo.api.UninterpretedOption uninterpreted_option = 999;</code>
   */
  @java.lang.Override
  public int getUninterpretedOptionCount() {
    return uninterpretedOption_.size();
  }
  /**
   * <pre>
   * The parser stores options it doesn't recognize here. See above.
   * </pre>
   *
   * <code>repeated .opensergo.api.UninterpretedOption uninterpreted_option = 999;</code>
   */
  @java.lang.Override
  public com.alibaba.opensergo.api.proto.UninterpretedOption getUninterpretedOption(int index) {
    return uninterpretedOption_.get(index);
  }
  /**
   * <pre>
   * The parser stores options it doesn't recognize here. See above.
   * </pre>
   *
   * <code>repeated .opensergo.api.UninterpretedOption uninterpreted_option = 999;</code>
   */
  @java.lang.Override
  public com.alibaba.opensergo.api.proto.UninterpretedOptionOrBuilder getUninterpretedOptionOrBuilder(
      int index) {
    return uninterpretedOption_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeEnum(1, ctype_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      output.writeBool(2, packed_);
    }
    if (((bitField0_ & 0x00000020) != 0)) {
      output.writeBool(3, deprecated_);
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      output.writeBool(5, lazy_);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      output.writeEnum(6, jstype_);
    }
    if (((bitField0_ & 0x00000040) != 0)) {
      output.writeBool(10, weak_);
    }
    if (((bitField0_ & 0x00000010) != 0)) {
      output.writeBool(15, unverifiedLazy_);
    }
    for (int i = 0; i < uninterpretedOption_.size(); i++) {
      output.writeMessage(999, uninterpretedOption_.get(i));
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(1, ctype_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(2, packed_);
    }
    if (((bitField0_ & 0x00000020) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(3, deprecated_);
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(5, lazy_);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(6, jstype_);
    }
    if (((bitField0_ & 0x00000040) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(10, weak_);
    }
    if (((bitField0_ & 0x00000010) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(15, unverifiedLazy_);
    }
    for (int i = 0; i < uninterpretedOption_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(999, uninterpretedOption_.get(i));
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.alibaba.opensergo.api.proto.FieldOptions)) {
      return super.equals(obj);
    }
    com.alibaba.opensergo.api.proto.FieldOptions other = (com.alibaba.opensergo.api.proto.FieldOptions) obj;

    if (hasCtype() != other.hasCtype()) return false;
    if (hasCtype()) {
      if (ctype_ != other.ctype_) return false;
    }
    if (hasPacked() != other.hasPacked()) return false;
    if (hasPacked()) {
      if (getPacked()
          != other.getPacked()) return false;
    }
    if (hasJstype() != other.hasJstype()) return false;
    if (hasJstype()) {
      if (jstype_ != other.jstype_) return false;
    }
    if (hasLazy() != other.hasLazy()) return false;
    if (hasLazy()) {
      if (getLazy()
          != other.getLazy()) return false;
    }
    if (hasUnverifiedLazy() != other.hasUnverifiedLazy()) return false;
    if (hasUnverifiedLazy()) {
      if (getUnverifiedLazy()
          != other.getUnverifiedLazy()) return false;
    }
    if (hasDeprecated() != other.hasDeprecated()) return false;
    if (hasDeprecated()) {
      if (getDeprecated()
          != other.getDeprecated()) return false;
    }
    if (hasWeak() != other.hasWeak()) return false;
    if (hasWeak()) {
      if (getWeak()
          != other.getWeak()) return false;
    }
    if (!getUninterpretedOptionList()
        .equals(other.getUninterpretedOptionList())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasCtype()) {
      hash = (37 * hash) + CTYPE_FIELD_NUMBER;
      hash = (53 * hash) + ctype_;
    }
    if (hasPacked()) {
      hash = (37 * hash) + PACKED_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getPacked());
    }
    if (hasJstype()) {
      hash = (37 * hash) + JSTYPE_FIELD_NUMBER;
      hash = (53 * hash) + jstype_;
    }
    if (hasLazy()) {
      hash = (37 * hash) + LAZY_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getLazy());
    }
    if (hasUnverifiedLazy()) {
      hash = (37 * hash) + UNVERIFIED_LAZY_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getUnverifiedLazy());
    }
    if (hasDeprecated()) {
      hash = (37 * hash) + DEPRECATED_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getDeprecated());
    }
    if (hasWeak()) {
      hash = (37 * hash) + WEAK_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getWeak());
    }
    if (getUninterpretedOptionCount() > 0) {
      hash = (37 * hash) + UNINTERPRETED_OPTION_FIELD_NUMBER;
      hash = (53 * hash) + getUninterpretedOptionList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.alibaba.opensergo.api.proto.FieldOptions parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.alibaba.opensergo.api.proto.FieldOptions parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.alibaba.opensergo.api.proto.FieldOptions parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.alibaba.opensergo.api.proto.FieldOptions parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.alibaba.opensergo.api.proto.FieldOptions parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.alibaba.opensergo.api.proto.FieldOptions parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.alibaba.opensergo.api.proto.FieldOptions parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.alibaba.opensergo.api.proto.FieldOptions parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.alibaba.opensergo.api.proto.FieldOptions parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.alibaba.opensergo.api.proto.FieldOptions parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.alibaba.opensergo.api.proto.FieldOptions parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.alibaba.opensergo.api.proto.FieldOptions parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.alibaba.opensergo.api.proto.FieldOptions prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code opensergo.api.FieldOptions}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:opensergo.api.FieldOptions)
      com.alibaba.opensergo.api.proto.FieldOptionsOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.alibaba.opensergo.api.proto.Servicecontract.internal_static_opensergo_api_FieldOptions_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.alibaba.opensergo.api.proto.Servicecontract.internal_static_opensergo_api_FieldOptions_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.alibaba.opensergo.api.proto.FieldOptions.class, com.alibaba.opensergo.api.proto.FieldOptions.Builder.class);
    }

    // Construct using com.alibaba.opensergo.api.proto.FieldOptions.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getUninterpretedOptionFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      ctype_ = 0;
      bitField0_ = (bitField0_ & ~0x00000001);
      packed_ = false;
      bitField0_ = (bitField0_ & ~0x00000002);
      jstype_ = 0;
      bitField0_ = (bitField0_ & ~0x00000004);
      lazy_ = false;
      bitField0_ = (bitField0_ & ~0x00000008);
      unverifiedLazy_ = false;
      bitField0_ = (bitField0_ & ~0x00000010);
      deprecated_ = false;
      bitField0_ = (bitField0_ & ~0x00000020);
      weak_ = false;
      bitField0_ = (bitField0_ & ~0x00000040);
      if (uninterpretedOptionBuilder_ == null) {
        uninterpretedOption_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
      } else {
        uninterpretedOptionBuilder_.clear();
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.alibaba.opensergo.api.proto.Servicecontract.internal_static_opensergo_api_FieldOptions_descriptor;
    }

    @java.lang.Override
    public com.alibaba.opensergo.api.proto.FieldOptions getDefaultInstanceForType() {
      return com.alibaba.opensergo.api.proto.FieldOptions.getDefaultInstance();
    }

    @java.lang.Override
    public com.alibaba.opensergo.api.proto.FieldOptions build() {
      com.alibaba.opensergo.api.proto.FieldOptions result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.alibaba.opensergo.api.proto.FieldOptions buildPartial() {
      com.alibaba.opensergo.api.proto.FieldOptions result = new com.alibaba.opensergo.api.proto.FieldOptions(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        to_bitField0_ |= 0x00000001;
      }
      result.ctype_ = ctype_;
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.packed_ = packed_;
        to_bitField0_ |= 0x00000002;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        to_bitField0_ |= 0x00000004;
      }
      result.jstype_ = jstype_;
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.lazy_ = lazy_;
        to_bitField0_ |= 0x00000008;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.unverifiedLazy_ = unverifiedLazy_;
        to_bitField0_ |= 0x00000010;
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.deprecated_ = deprecated_;
        to_bitField0_ |= 0x00000020;
      }
      if (((from_bitField0_ & 0x00000040) != 0)) {
        result.weak_ = weak_;
        to_bitField0_ |= 0x00000040;
      }
      if (uninterpretedOptionBuilder_ == null) {
        if (((bitField0_ & 0x00000080) != 0)) {
          uninterpretedOption_ = java.util.Collections.unmodifiableList(uninterpretedOption_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.uninterpretedOption_ = uninterpretedOption_;
      } else {
        result.uninterpretedOption_ = uninterpretedOptionBuilder_.build();
      }
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.alibaba.opensergo.api.proto.FieldOptions) {
        return mergeFrom((com.alibaba.opensergo.api.proto.FieldOptions)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.alibaba.opensergo.api.proto.FieldOptions other) {
      if (other == com.alibaba.opensergo.api.proto.FieldOptions.getDefaultInstance()) return this;
      if (other.hasCtype()) {
        setCtype(other.getCtype());
      }
      if (other.hasPacked()) {
        setPacked(other.getPacked());
      }
      if (other.hasJstype()) {
        setJstype(other.getJstype());
      }
      if (other.hasLazy()) {
        setLazy(other.getLazy());
      }
      if (other.hasUnverifiedLazy()) {
        setUnverifiedLazy(other.getUnverifiedLazy());
      }
      if (other.hasDeprecated()) {
        setDeprecated(other.getDeprecated());
      }
      if (other.hasWeak()) {
        setWeak(other.getWeak());
      }
      if (uninterpretedOptionBuilder_ == null) {
        if (!other.uninterpretedOption_.isEmpty()) {
          if (uninterpretedOption_.isEmpty()) {
            uninterpretedOption_ = other.uninterpretedOption_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensureUninterpretedOptionIsMutable();
            uninterpretedOption_.addAll(other.uninterpretedOption_);
          }
          onChanged();
        }
      } else {
        if (!other.uninterpretedOption_.isEmpty()) {
          if (uninterpretedOptionBuilder_.isEmpty()) {
            uninterpretedOptionBuilder_.dispose();
            uninterpretedOptionBuilder_ = null;
            uninterpretedOption_ = other.uninterpretedOption_;
            bitField0_ = (bitField0_ & ~0x00000080);
            uninterpretedOptionBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getUninterpretedOptionFieldBuilder() : null;
          } else {
            uninterpretedOptionBuilder_.addAllMessages(other.uninterpretedOption_);
          }
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.alibaba.opensergo.api.proto.FieldOptions parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.alibaba.opensergo.api.proto.FieldOptions) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private int ctype_ = 0;
    /**
     * <pre>
     * The ctype option instructs the C++ code generator to use a different
     * representation of the field than it normally would.  See the specific
     * options below.  This option is not yet implemented in the open source
     * release -- sorry, we'll try to include it in a future version!
     * </pre>
     *
     * <code>optional .opensergo.api.FieldOptions.CType ctype = 1;</code>
     * @return Whether the ctype field is set.
     */
    @java.lang.Override public boolean hasCtype() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The ctype option instructs the C++ code generator to use a different
     * representation of the field than it normally would.  See the specific
     * options below.  This option is not yet implemented in the open source
     * release -- sorry, we'll try to include it in a future version!
     * </pre>
     *
     * <code>optional .opensergo.api.FieldOptions.CType ctype = 1;</code>
     * @return The enum numeric value on the wire for ctype.
     */
    @java.lang.Override public int getCtypeValue() {
      return ctype_;
    }
    /**
     * <pre>
     * The ctype option instructs the C++ code generator to use a different
     * representation of the field than it normally would.  See the specific
     * options below.  This option is not yet implemented in the open source
     * release -- sorry, we'll try to include it in a future version!
     * </pre>
     *
     * <code>optional .opensergo.api.FieldOptions.CType ctype = 1;</code>
     * @param value The enum numeric value on the wire for ctype to set.
     * @return This builder for chaining.
     */
    public Builder setCtypeValue(int value) {
      bitField0_ |= 0x00000001;
      ctype_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The ctype option instructs the C++ code generator to use a different
     * representation of the field than it normally would.  See the specific
     * options below.  This option is not yet implemented in the open source
     * release -- sorry, we'll try to include it in a future version!
     * </pre>
     *
     * <code>optional .opensergo.api.FieldOptions.CType ctype = 1;</code>
     * @return The ctype.
     */
    @java.lang.Override
    public com.alibaba.opensergo.api.proto.FieldOptions.CType getCtype() {
      @SuppressWarnings("deprecation")
      com.alibaba.opensergo.api.proto.FieldOptions.CType result = com.alibaba.opensergo.api.proto.FieldOptions.CType.valueOf(ctype_);
      return result == null ? com.alibaba.opensergo.api.proto.FieldOptions.CType.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * The ctype option instructs the C++ code generator to use a different
     * representation of the field than it normally would.  See the specific
     * options below.  This option is not yet implemented in the open source
     * release -- sorry, we'll try to include it in a future version!
     * </pre>
     *
     * <code>optional .opensergo.api.FieldOptions.CType ctype = 1;</code>
     * @param value The ctype to set.
     * @return This builder for chaining.
     */
    public Builder setCtype(com.alibaba.opensergo.api.proto.FieldOptions.CType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000001;
      ctype_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The ctype option instructs the C++ code generator to use a different
     * representation of the field than it normally would.  See the specific
     * options below.  This option is not yet implemented in the open source
     * release -- sorry, we'll try to include it in a future version!
     * </pre>
     *
     * <code>optional .opensergo.api.FieldOptions.CType ctype = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearCtype() {
      bitField0_ = (bitField0_ & ~0x00000001);
      ctype_ = 0;
      onChanged();
      return this;
    }

    private boolean packed_ ;
    /**
     * <pre>
     * The packed option can be enabled for repeated primitive fields to enable
     * a more efficient representation on the wire. Rather than repeatedly
     * writing the tag and type for each element, the entire array is encoded as
     * a single length-delimited blob. In proto3, only explicit setting it to
     * false will avoid using packed encoding.
     * </pre>
     *
     * <code>optional bool packed = 2;</code>
     * @return Whether the packed field is set.
     */
    @java.lang.Override
    public boolean hasPacked() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * The packed option can be enabled for repeated primitive fields to enable
     * a more efficient representation on the wire. Rather than repeatedly
     * writing the tag and type for each element, the entire array is encoded as
     * a single length-delimited blob. In proto3, only explicit setting it to
     * false will avoid using packed encoding.
     * </pre>
     *
     * <code>optional bool packed = 2;</code>
     * @return The packed.
     */
    @java.lang.Override
    public boolean getPacked() {
      return packed_;
    }
    /**
     * <pre>
     * The packed option can be enabled for repeated primitive fields to enable
     * a more efficient representation on the wire. Rather than repeatedly
     * writing the tag and type for each element, the entire array is encoded as
     * a single length-delimited blob. In proto3, only explicit setting it to
     * false will avoid using packed encoding.
     * </pre>
     *
     * <code>optional bool packed = 2;</code>
     * @param value The packed to set.
     * @return This builder for chaining.
     */
    public Builder setPacked(boolean value) {
      bitField0_ |= 0x00000002;
      packed_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The packed option can be enabled for repeated primitive fields to enable
     * a more efficient representation on the wire. Rather than repeatedly
     * writing the tag and type for each element, the entire array is encoded as
     * a single length-delimited blob. In proto3, only explicit setting it to
     * false will avoid using packed encoding.
     * </pre>
     *
     * <code>optional bool packed = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearPacked() {
      bitField0_ = (bitField0_ & ~0x00000002);
      packed_ = false;
      onChanged();
      return this;
    }

    private int jstype_ = 0;
    /**
     * <pre>
     * The jstype option determines the JavaScript type used for values of the
     * field.  The option is permitted only for 64 bit integral and fixed types
     * (int64, uint64, sint64, fixed64, sfixed64).  A field with jstype JS_STRING
     * is represented as JavaScript string, which avoids loss of precision that
     * can happen when a large value is converted to a floating point JavaScript.
     * Specifying JS_NUMBER for the jstype causes the generated JavaScript code to
     * use the JavaScript "number" type.  The behavior of the default option
     * JS_NORMAL is implementation dependent.
     * This option is an enum to permit additional types to be added, e.g.
     * goog.math.Integer.
     * </pre>
     *
     * <code>optional .opensergo.api.FieldOptions.JSType jstype = 6;</code>
     * @return Whether the jstype field is set.
     */
    @java.lang.Override public boolean hasJstype() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * The jstype option determines the JavaScript type used for values of the
     * field.  The option is permitted only for 64 bit integral and fixed types
     * (int64, uint64, sint64, fixed64, sfixed64).  A field with jstype JS_STRING
     * is represented as JavaScript string, which avoids loss of precision that
     * can happen when a large value is converted to a floating point JavaScript.
     * Specifying JS_NUMBER for the jstype causes the generated JavaScript code to
     * use the JavaScript "number" type.  The behavior of the default option
     * JS_NORMAL is implementation dependent.
     * This option is an enum to permit additional types to be added, e.g.
     * goog.math.Integer.
     * </pre>
     *
     * <code>optional .opensergo.api.FieldOptions.JSType jstype = 6;</code>
     * @return The enum numeric value on the wire for jstype.
     */
    @java.lang.Override public int getJstypeValue() {
      return jstype_;
    }
    /**
     * <pre>
     * The jstype option determines the JavaScript type used for values of the
     * field.  The option is permitted only for 64 bit integral and fixed types
     * (int64, uint64, sint64, fixed64, sfixed64).  A field with jstype JS_STRING
     * is represented as JavaScript string, which avoids loss of precision that
     * can happen when a large value is converted to a floating point JavaScript.
     * Specifying JS_NUMBER for the jstype causes the generated JavaScript code to
     * use the JavaScript "number" type.  The behavior of the default option
     * JS_NORMAL is implementation dependent.
     * This option is an enum to permit additional types to be added, e.g.
     * goog.math.Integer.
     * </pre>
     *
     * <code>optional .opensergo.api.FieldOptions.JSType jstype = 6;</code>
     * @param value The enum numeric value on the wire for jstype to set.
     * @return This builder for chaining.
     */
    public Builder setJstypeValue(int value) {
      bitField0_ |= 0x00000004;
      jstype_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The jstype option determines the JavaScript type used for values of the
     * field.  The option is permitted only for 64 bit integral and fixed types
     * (int64, uint64, sint64, fixed64, sfixed64).  A field with jstype JS_STRING
     * is represented as JavaScript string, which avoids loss of precision that
     * can happen when a large value is converted to a floating point JavaScript.
     * Specifying JS_NUMBER for the jstype causes the generated JavaScript code to
     * use the JavaScript "number" type.  The behavior of the default option
     * JS_NORMAL is implementation dependent.
     * This option is an enum to permit additional types to be added, e.g.
     * goog.math.Integer.
     * </pre>
     *
     * <code>optional .opensergo.api.FieldOptions.JSType jstype = 6;</code>
     * @return The jstype.
     */
    @java.lang.Override
    public com.alibaba.opensergo.api.proto.FieldOptions.JSType getJstype() {
      @SuppressWarnings("deprecation")
      com.alibaba.opensergo.api.proto.FieldOptions.JSType result = com.alibaba.opensergo.api.proto.FieldOptions.JSType.valueOf(jstype_);
      return result == null ? com.alibaba.opensergo.api.proto.FieldOptions.JSType.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * The jstype option determines the JavaScript type used for values of the
     * field.  The option is permitted only for 64 bit integral and fixed types
     * (int64, uint64, sint64, fixed64, sfixed64).  A field with jstype JS_STRING
     * is represented as JavaScript string, which avoids loss of precision that
     * can happen when a large value is converted to a floating point JavaScript.
     * Specifying JS_NUMBER for the jstype causes the generated JavaScript code to
     * use the JavaScript "number" type.  The behavior of the default option
     * JS_NORMAL is implementation dependent.
     * This option is an enum to permit additional types to be added, e.g.
     * goog.math.Integer.
     * </pre>
     *
     * <code>optional .opensergo.api.FieldOptions.JSType jstype = 6;</code>
     * @param value The jstype to set.
     * @return This builder for chaining.
     */
    public Builder setJstype(com.alibaba.opensergo.api.proto.FieldOptions.JSType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000004;
      jstype_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The jstype option determines the JavaScript type used for values of the
     * field.  The option is permitted only for 64 bit integral and fixed types
     * (int64, uint64, sint64, fixed64, sfixed64).  A field with jstype JS_STRING
     * is represented as JavaScript string, which avoids loss of precision that
     * can happen when a large value is converted to a floating point JavaScript.
     * Specifying JS_NUMBER for the jstype causes the generated JavaScript code to
     * use the JavaScript "number" type.  The behavior of the default option
     * JS_NORMAL is implementation dependent.
     * This option is an enum to permit additional types to be added, e.g.
     * goog.math.Integer.
     * </pre>
     *
     * <code>optional .opensergo.api.FieldOptions.JSType jstype = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearJstype() {
      bitField0_ = (bitField0_ & ~0x00000004);
      jstype_ = 0;
      onChanged();
      return this;
    }

    private boolean lazy_ ;
    /**
     * <pre>
     * Should this field be parsed lazily?  Lazy applies only to message-type
     * fields.  It means that when the outer message is initially parsed, the
     * inner message's contents will not be parsed but instead stored in encoded
     * form.  The inner message will actually be parsed when it is first accessed.
     * This is only a hint.  Implementations are free to choose whether to use
     * eager or lazy parsing regardless of the value of this option.  However,
     * setting this option true suggests that the protocol author believes that
     * using lazy parsing on this field is worth the additional bookkeeping
     * overhead typically needed to implement it.
     * This option does not affect the public interface of any generated code;
     * all method signatures remain the same.  Furthermore, thread-safety of the
     * interface is not affected by this option; const methods remain safe to
     * call from multiple threads concurrently, while non-const methods continue
     * to require exclusive access.
     * Note that implementations may choose not to check required fields within
     * a lazy sub-message.  That is, calling IsInitialized() on the outer message
     * may return true even if the inner message has missing required fields.
     * This is necessary because otherwise the inner message would have to be
     * parsed in order to perform the check, defeating the purpose of lazy
     * parsing.  An implementation which chooses not to check required fields
     * must be consistent about it.  That is, for any particular sub-message, the
     * implementation must either *always* check its required fields, or *never*
     * check its required fields, regardless of whether or not the message has
     * been parsed.
     * As of 2021, lazy does no correctness checks on the byte stream during
     * parsing.  This may lead to crashes if and when an invalid byte stream is
     * finally parsed upon access.
     * TODO(b/211906113):  Enable validation on lazy fields.
     * </pre>
     *
     * <code>optional bool lazy = 5;</code>
     * @return Whether the lazy field is set.
     */
    @java.lang.Override
    public boolean hasLazy() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Should this field be parsed lazily?  Lazy applies only to message-type
     * fields.  It means that when the outer message is initially parsed, the
     * inner message's contents will not be parsed but instead stored in encoded
     * form.  The inner message will actually be parsed when it is first accessed.
     * This is only a hint.  Implementations are free to choose whether to use
     * eager or lazy parsing regardless of the value of this option.  However,
     * setting this option true suggests that the protocol author believes that
     * using lazy parsing on this field is worth the additional bookkeeping
     * overhead typically needed to implement it.
     * This option does not affect the public interface of any generated code;
     * all method signatures remain the same.  Furthermore, thread-safety of the
     * interface is not affected by this option; const methods remain safe to
     * call from multiple threads concurrently, while non-const methods continue
     * to require exclusive access.
     * Note that implementations may choose not to check required fields within
     * a lazy sub-message.  That is, calling IsInitialized() on the outer message
     * may return true even if the inner message has missing required fields.
     * This is necessary because otherwise the inner message would have to be
     * parsed in order to perform the check, defeating the purpose of lazy
     * parsing.  An implementation which chooses not to check required fields
     * must be consistent about it.  That is, for any particular sub-message, the
     * implementation must either *always* check its required fields, or *never*
     * check its required fields, regardless of whether or not the message has
     * been parsed.
     * As of 2021, lazy does no correctness checks on the byte stream during
     * parsing.  This may lead to crashes if and when an invalid byte stream is
     * finally parsed upon access.
     * TODO(b/211906113):  Enable validation on lazy fields.
     * </pre>
     *
     * <code>optional bool lazy = 5;</code>
     * @return The lazy.
     */
    @java.lang.Override
    public boolean getLazy() {
      return lazy_;
    }
    /**
     * <pre>
     * Should this field be parsed lazily?  Lazy applies only to message-type
     * fields.  It means that when the outer message is initially parsed, the
     * inner message's contents will not be parsed but instead stored in encoded
     * form.  The inner message will actually be parsed when it is first accessed.
     * This is only a hint.  Implementations are free to choose whether to use
     * eager or lazy parsing regardless of the value of this option.  However,
     * setting this option true suggests that the protocol author believes that
     * using lazy parsing on this field is worth the additional bookkeeping
     * overhead typically needed to implement it.
     * This option does not affect the public interface of any generated code;
     * all method signatures remain the same.  Furthermore, thread-safety of the
     * interface is not affected by this option; const methods remain safe to
     * call from multiple threads concurrently, while non-const methods continue
     * to require exclusive access.
     * Note that implementations may choose not to check required fields within
     * a lazy sub-message.  That is, calling IsInitialized() on the outer message
     * may return true even if the inner message has missing required fields.
     * This is necessary because otherwise the inner message would have to be
     * parsed in order to perform the check, defeating the purpose of lazy
     * parsing.  An implementation which chooses not to check required fields
     * must be consistent about it.  That is, for any particular sub-message, the
     * implementation must either *always* check its required fields, or *never*
     * check its required fields, regardless of whether or not the message has
     * been parsed.
     * As of 2021, lazy does no correctness checks on the byte stream during
     * parsing.  This may lead to crashes if and when an invalid byte stream is
     * finally parsed upon access.
     * TODO(b/211906113):  Enable validation on lazy fields.
     * </pre>
     *
     * <code>optional bool lazy = 5;</code>
     * @param value The lazy to set.
     * @return This builder for chaining.
     */
    public Builder setLazy(boolean value) {
      bitField0_ |= 0x00000008;
      lazy_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Should this field be parsed lazily?  Lazy applies only to message-type
     * fields.  It means that when the outer message is initially parsed, the
     * inner message's contents will not be parsed but instead stored in encoded
     * form.  The inner message will actually be parsed when it is first accessed.
     * This is only a hint.  Implementations are free to choose whether to use
     * eager or lazy parsing regardless of the value of this option.  However,
     * setting this option true suggests that the protocol author believes that
     * using lazy parsing on this field is worth the additional bookkeeping
     * overhead typically needed to implement it.
     * This option does not affect the public interface of any generated code;
     * all method signatures remain the same.  Furthermore, thread-safety of the
     * interface is not affected by this option; const methods remain safe to
     * call from multiple threads concurrently, while non-const methods continue
     * to require exclusive access.
     * Note that implementations may choose not to check required fields within
     * a lazy sub-message.  That is, calling IsInitialized() on the outer message
     * may return true even if the inner message has missing required fields.
     * This is necessary because otherwise the inner message would have to be
     * parsed in order to perform the check, defeating the purpose of lazy
     * parsing.  An implementation which chooses not to check required fields
     * must be consistent about it.  That is, for any particular sub-message, the
     * implementation must either *always* check its required fields, or *never*
     * check its required fields, regardless of whether or not the message has
     * been parsed.
     * As of 2021, lazy does no correctness checks on the byte stream during
     * parsing.  This may lead to crashes if and when an invalid byte stream is
     * finally parsed upon access.
     * TODO(b/211906113):  Enable validation on lazy fields.
     * </pre>
     *
     * <code>optional bool lazy = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearLazy() {
      bitField0_ = (bitField0_ & ~0x00000008);
      lazy_ = false;
      onChanged();
      return this;
    }

    private boolean unverifiedLazy_ ;
    /**
     * <pre>
     * unverified_lazy does no correctness checks on the byte stream. This should
     * only be used where lazy with verification is prohibitive for performance
     * reasons.
     * </pre>
     *
     * <code>optional bool unverified_lazy = 15;</code>
     * @return Whether the unverifiedLazy field is set.
     */
    @java.lang.Override
    public boolean hasUnverifiedLazy() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * unverified_lazy does no correctness checks on the byte stream. This should
     * only be used where lazy with verification is prohibitive for performance
     * reasons.
     * </pre>
     *
     * <code>optional bool unverified_lazy = 15;</code>
     * @return The unverifiedLazy.
     */
    @java.lang.Override
    public boolean getUnverifiedLazy() {
      return unverifiedLazy_;
    }
    /**
     * <pre>
     * unverified_lazy does no correctness checks on the byte stream. This should
     * only be used where lazy with verification is prohibitive for performance
     * reasons.
     * </pre>
     *
     * <code>optional bool unverified_lazy = 15;</code>
     * @param value The unverifiedLazy to set.
     * @return This builder for chaining.
     */
    public Builder setUnverifiedLazy(boolean value) {
      bitField0_ |= 0x00000010;
      unverifiedLazy_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * unverified_lazy does no correctness checks on the byte stream. This should
     * only be used where lazy with verification is prohibitive for performance
     * reasons.
     * </pre>
     *
     * <code>optional bool unverified_lazy = 15;</code>
     * @return This builder for chaining.
     */
    public Builder clearUnverifiedLazy() {
      bitField0_ = (bitField0_ & ~0x00000010);
      unverifiedLazy_ = false;
      onChanged();
      return this;
    }

    private boolean deprecated_ ;
    /**
     * <pre>
     * Is this field deprecated?
     * Depending on the target platform, this can emit Deprecated annotations
     * for accessors, or it will be completely ignored; in the very least, this
     * is a formalization for deprecating fields.
     * </pre>
     *
     * <code>optional bool deprecated = 3;</code>
     * @return Whether the deprecated field is set.
     */
    @java.lang.Override
    public boolean hasDeprecated() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * Is this field deprecated?
     * Depending on the target platform, this can emit Deprecated annotations
     * for accessors, or it will be completely ignored; in the very least, this
     * is a formalization for deprecating fields.
     * </pre>
     *
     * <code>optional bool deprecated = 3;</code>
     * @return The deprecated.
     */
    @java.lang.Override
    public boolean getDeprecated() {
      return deprecated_;
    }
    /**
     * <pre>
     * Is this field deprecated?
     * Depending on the target platform, this can emit Deprecated annotations
     * for accessors, or it will be completely ignored; in the very least, this
     * is a formalization for deprecating fields.
     * </pre>
     *
     * <code>optional bool deprecated = 3;</code>
     * @param value The deprecated to set.
     * @return This builder for chaining.
     */
    public Builder setDeprecated(boolean value) {
      bitField0_ |= 0x00000020;
      deprecated_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Is this field deprecated?
     * Depending on the target platform, this can emit Deprecated annotations
     * for accessors, or it will be completely ignored; in the very least, this
     * is a formalization for deprecating fields.
     * </pre>
     *
     * <code>optional bool deprecated = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearDeprecated() {
      bitField0_ = (bitField0_ & ~0x00000020);
      deprecated_ = false;
      onChanged();
      return this;
    }

    private boolean weak_ ;
    /**
     * <pre>
     * For Google-internal migration only. Do not use.
     * </pre>
     *
     * <code>optional bool weak = 10;</code>
     * @return Whether the weak field is set.
     */
    @java.lang.Override
    public boolean hasWeak() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <pre>
     * For Google-internal migration only. Do not use.
     * </pre>
     *
     * <code>optional bool weak = 10;</code>
     * @return The weak.
     */
    @java.lang.Override
    public boolean getWeak() {
      return weak_;
    }
    /**
     * <pre>
     * For Google-internal migration only. Do not use.
     * </pre>
     *
     * <code>optional bool weak = 10;</code>
     * @param value The weak to set.
     * @return This builder for chaining.
     */
    public Builder setWeak(boolean value) {
      bitField0_ |= 0x00000040;
      weak_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * For Google-internal migration only. Do not use.
     * </pre>
     *
     * <code>optional bool weak = 10;</code>
     * @return This builder for chaining.
     */
    public Builder clearWeak() {
      bitField0_ = (bitField0_ & ~0x00000040);
      weak_ = false;
      onChanged();
      return this;
    }

    private java.util.List<com.alibaba.opensergo.api.proto.UninterpretedOption> uninterpretedOption_ =
      java.util.Collections.emptyList();
    private void ensureUninterpretedOptionIsMutable() {
      if (!((bitField0_ & 0x00000080) != 0)) {
        uninterpretedOption_ = new java.util.ArrayList<com.alibaba.opensergo.api.proto.UninterpretedOption>(uninterpretedOption_);
        bitField0_ |= 0x00000080;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.alibaba.opensergo.api.proto.UninterpretedOption, com.alibaba.opensergo.api.proto.UninterpretedOption.Builder, com.alibaba.opensergo.api.proto.UninterpretedOptionOrBuilder> uninterpretedOptionBuilder_;

    /**
     * <pre>
     * The parser stores options it doesn't recognize here. See above.
     * </pre>
     *
     * <code>repeated .opensergo.api.UninterpretedOption uninterpreted_option = 999;</code>
     */
    public java.util.List<com.alibaba.opensergo.api.proto.UninterpretedOption> getUninterpretedOptionList() {
      if (uninterpretedOptionBuilder_ == null) {
        return java.util.Collections.unmodifiableList(uninterpretedOption_);
      } else {
        return uninterpretedOptionBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * The parser stores options it doesn't recognize here. See above.
     * </pre>
     *
     * <code>repeated .opensergo.api.UninterpretedOption uninterpreted_option = 999;</code>
     */
    public int getUninterpretedOptionCount() {
      if (uninterpretedOptionBuilder_ == null) {
        return uninterpretedOption_.size();
      } else {
        return uninterpretedOptionBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * The parser stores options it doesn't recognize here. See above.
     * </pre>
     *
     * <code>repeated .opensergo.api.UninterpretedOption uninterpreted_option = 999;</code>
     */
    public com.alibaba.opensergo.api.proto.UninterpretedOption getUninterpretedOption(int index) {
      if (uninterpretedOptionBuilder_ == null) {
        return uninterpretedOption_.get(index);
      } else {
        return uninterpretedOptionBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * The parser stores options it doesn't recognize here. See above.
     * </pre>
     *
     * <code>repeated .opensergo.api.UninterpretedOption uninterpreted_option = 999;</code>
     */
    public Builder setUninterpretedOption(
        int index, com.alibaba.opensergo.api.proto.UninterpretedOption value) {
      if (uninterpretedOptionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureUninterpretedOptionIsMutable();
        uninterpretedOption_.set(index, value);
        onChanged();
      } else {
        uninterpretedOptionBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * The parser stores options it doesn't recognize here. See above.
     * </pre>
     *
     * <code>repeated .opensergo.api.UninterpretedOption uninterpreted_option = 999;</code>
     */
    public Builder setUninterpretedOption(
        int index, com.alibaba.opensergo.api.proto.UninterpretedOption.Builder builderForValue) {
      if (uninterpretedOptionBuilder_ == null) {
        ensureUninterpretedOptionIsMutable();
        uninterpretedOption_.set(index, builderForValue.build());
        onChanged();
      } else {
        uninterpretedOptionBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The parser stores options it doesn't recognize here. See above.
     * </pre>
     *
     * <code>repeated .opensergo.api.UninterpretedOption uninterpreted_option = 999;</code>
     */
    public Builder addUninterpretedOption(com.alibaba.opensergo.api.proto.UninterpretedOption value) {
      if (uninterpretedOptionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureUninterpretedOptionIsMutable();
        uninterpretedOption_.add(value);
        onChanged();
      } else {
        uninterpretedOptionBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * The parser stores options it doesn't recognize here. See above.
     * </pre>
     *
     * <code>repeated .opensergo.api.UninterpretedOption uninterpreted_option = 999;</code>
     */
    public Builder addUninterpretedOption(
        int index, com.alibaba.opensergo.api.proto.UninterpretedOption value) {
      if (uninterpretedOptionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureUninterpretedOptionIsMutable();
        uninterpretedOption_.add(index, value);
        onChanged();
      } else {
        uninterpretedOptionBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * The parser stores options it doesn't recognize here. See above.
     * </pre>
     *
     * <code>repeated .opensergo.api.UninterpretedOption uninterpreted_option = 999;</code>
     */
    public Builder addUninterpretedOption(
        com.alibaba.opensergo.api.proto.UninterpretedOption.Builder builderForValue) {
      if (uninterpretedOptionBuilder_ == null) {
        ensureUninterpretedOptionIsMutable();
        uninterpretedOption_.add(builderForValue.build());
        onChanged();
      } else {
        uninterpretedOptionBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The parser stores options it doesn't recognize here. See above.
     * </pre>
     *
     * <code>repeated .opensergo.api.UninterpretedOption uninterpreted_option = 999;</code>
     */
    public Builder addUninterpretedOption(
        int index, com.alibaba.opensergo.api.proto.UninterpretedOption.Builder builderForValue) {
      if (uninterpretedOptionBuilder_ == null) {
        ensureUninterpretedOptionIsMutable();
        uninterpretedOption_.add(index, builderForValue.build());
        onChanged();
      } else {
        uninterpretedOptionBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The parser stores options it doesn't recognize here. See above.
     * </pre>
     *
     * <code>repeated .opensergo.api.UninterpretedOption uninterpreted_option = 999;</code>
     */
    public Builder addAllUninterpretedOption(
        java.lang.Iterable<? extends com.alibaba.opensergo.api.proto.UninterpretedOption> values) {
      if (uninterpretedOptionBuilder_ == null) {
        ensureUninterpretedOptionIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, uninterpretedOption_);
        onChanged();
      } else {
        uninterpretedOptionBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * The parser stores options it doesn't recognize here. See above.
     * </pre>
     *
     * <code>repeated .opensergo.api.UninterpretedOption uninterpreted_option = 999;</code>
     */
    public Builder clearUninterpretedOption() {
      if (uninterpretedOptionBuilder_ == null) {
        uninterpretedOption_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
      } else {
        uninterpretedOptionBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * The parser stores options it doesn't recognize here. See above.
     * </pre>
     *
     * <code>repeated .opensergo.api.UninterpretedOption uninterpreted_option = 999;</code>
     */
    public Builder removeUninterpretedOption(int index) {
      if (uninterpretedOptionBuilder_ == null) {
        ensureUninterpretedOptionIsMutable();
        uninterpretedOption_.remove(index);
        onChanged();
      } else {
        uninterpretedOptionBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * The parser stores options it doesn't recognize here. See above.
     * </pre>
     *
     * <code>repeated .opensergo.api.UninterpretedOption uninterpreted_option = 999;</code>
     */
    public com.alibaba.opensergo.api.proto.UninterpretedOption.Builder getUninterpretedOptionBuilder(
        int index) {
      return getUninterpretedOptionFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * The parser stores options it doesn't recognize here. See above.
     * </pre>
     *
     * <code>repeated .opensergo.api.UninterpretedOption uninterpreted_option = 999;</code>
     */
    public com.alibaba.opensergo.api.proto.UninterpretedOptionOrBuilder getUninterpretedOptionOrBuilder(
        int index) {
      if (uninterpretedOptionBuilder_ == null) {
        return uninterpretedOption_.get(index);  } else {
        return uninterpretedOptionBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * The parser stores options it doesn't recognize here. See above.
     * </pre>
     *
     * <code>repeated .opensergo.api.UninterpretedOption uninterpreted_option = 999;</code>
     */
    public java.util.List<? extends com.alibaba.opensergo.api.proto.UninterpretedOptionOrBuilder> 
         getUninterpretedOptionOrBuilderList() {
      if (uninterpretedOptionBuilder_ != null) {
        return uninterpretedOptionBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(uninterpretedOption_);
      }
    }
    /**
     * <pre>
     * The parser stores options it doesn't recognize here. See above.
     * </pre>
     *
     * <code>repeated .opensergo.api.UninterpretedOption uninterpreted_option = 999;</code>
     */
    public com.alibaba.opensergo.api.proto.UninterpretedOption.Builder addUninterpretedOptionBuilder() {
      return getUninterpretedOptionFieldBuilder().addBuilder(
          com.alibaba.opensergo.api.proto.UninterpretedOption.getDefaultInstance());
    }
    /**
     * <pre>
     * The parser stores options it doesn't recognize here. See above.
     * </pre>
     *
     * <code>repeated .opensergo.api.UninterpretedOption uninterpreted_option = 999;</code>
     */
    public com.alibaba.opensergo.api.proto.UninterpretedOption.Builder addUninterpretedOptionBuilder(
        int index) {
      return getUninterpretedOptionFieldBuilder().addBuilder(
          index, com.alibaba.opensergo.api.proto.UninterpretedOption.getDefaultInstance());
    }
    /**
     * <pre>
     * The parser stores options it doesn't recognize here. See above.
     * </pre>
     *
     * <code>repeated .opensergo.api.UninterpretedOption uninterpreted_option = 999;</code>
     */
    public java.util.List<com.alibaba.opensergo.api.proto.UninterpretedOption.Builder> 
         getUninterpretedOptionBuilderList() {
      return getUninterpretedOptionFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.alibaba.opensergo.api.proto.UninterpretedOption, com.alibaba.opensergo.api.proto.UninterpretedOption.Builder, com.alibaba.opensergo.api.proto.UninterpretedOptionOrBuilder> 
        getUninterpretedOptionFieldBuilder() {
      if (uninterpretedOptionBuilder_ == null) {
        uninterpretedOptionBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.alibaba.opensergo.api.proto.UninterpretedOption, com.alibaba.opensergo.api.proto.UninterpretedOption.Builder, com.alibaba.opensergo.api.proto.UninterpretedOptionOrBuilder>(
                uninterpretedOption_,
                ((bitField0_ & 0x00000080) != 0),
                getParentForChildren(),
                isClean());
        uninterpretedOption_ = null;
      }
      return uninterpretedOptionBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:opensergo.api.FieldOptions)
  }

  // @@protoc_insertion_point(class_scope:opensergo.api.FieldOptions)
  private static final com.alibaba.opensergo.api.proto.FieldOptions DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.alibaba.opensergo.api.proto.FieldOptions();
  }

  public static com.alibaba.opensergo.api.proto.FieldOptions getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<FieldOptions>
      PARSER = new com.google.protobuf.AbstractParser<FieldOptions>() {
    @java.lang.Override
    public FieldOptions parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new FieldOptions(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<FieldOptions> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<FieldOptions> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.alibaba.opensergo.api.proto.FieldOptions getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

