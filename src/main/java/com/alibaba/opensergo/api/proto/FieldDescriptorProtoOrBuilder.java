// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: specification/proto/servicecontract.proto

package com.alibaba.opensergo.api.proto;

public interface FieldDescriptorProtoOrBuilder extends
    // @@protoc_insertion_point(interface_extends:opensergo.api.FieldDescriptorProto)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>optional string name = 1;</code>
   * @return Whether the name field is set.
   */
  boolean hasName();
  /**
   * <code>optional string name = 1;</code>
   * @return The name.
   */
  java.lang.String getName();
  /**
   * <code>optional string name = 1;</code>
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <code>optional int32 number = 3;</code>
   * @return Whether the number field is set.
   */
  boolean hasNumber();
  /**
   * <code>optional int32 number = 3;</code>
   * @return The number.
   */
  int getNumber();

  /**
   * <code>optional .opensergo.api.FieldDescriptorProto.Label label = 4;</code>
   * @return Whether the label field is set.
   */
  boolean hasLabel();
  /**
   * <code>optional .opensergo.api.FieldDescriptorProto.Label label = 4;</code>
   * @return The enum numeric value on the wire for label.
   */
  int getLabelValue();
  /**
   * <code>optional .opensergo.api.FieldDescriptorProto.Label label = 4;</code>
   * @return The label.
   */
  com.alibaba.opensergo.api.proto.FieldDescriptorProto.Label getLabel();

  /**
   * <pre>
   * If type_name is set, this need not be set.  If both this and type_name
   * are set, this must be one of TYPE_ENUM, TYPE_MESSAGE or TYPE_GROUP.
   * </pre>
   *
   * <code>optional .opensergo.api.FieldDescriptorProto.Type type = 5;</code>
   * @return Whether the type field is set.
   */
  boolean hasType();
  /**
   * <pre>
   * If type_name is set, this need not be set.  If both this and type_name
   * are set, this must be one of TYPE_ENUM, TYPE_MESSAGE or TYPE_GROUP.
   * </pre>
   *
   * <code>optional .opensergo.api.FieldDescriptorProto.Type type = 5;</code>
   * @return The enum numeric value on the wire for type.
   */
  int getTypeValue();
  /**
   * <pre>
   * If type_name is set, this need not be set.  If both this and type_name
   * are set, this must be one of TYPE_ENUM, TYPE_MESSAGE or TYPE_GROUP.
   * </pre>
   *
   * <code>optional .opensergo.api.FieldDescriptorProto.Type type = 5;</code>
   * @return The type.
   */
  com.alibaba.opensergo.api.proto.FieldDescriptorProto.Type getType();

  /**
   * <pre>
   * For message and enum types, this is the name of the type.  If the name
   * starts with a '.', it is fully-qualified.  Otherwise, C++-like scoping
   * rules are used to find the type (i.e. first the nested types within this
   * message are searched, then within the parent, on up to the root
   * namespace).
   * </pre>
   *
   * <code>optional string type_name = 6;</code>
   * @return Whether the typeName field is set.
   */
  boolean hasTypeName();
  /**
   * <pre>
   * For message and enum types, this is the name of the type.  If the name
   * starts with a '.', it is fully-qualified.  Otherwise, C++-like scoping
   * rules are used to find the type (i.e. first the nested types within this
   * message are searched, then within the parent, on up to the root
   * namespace).
   * </pre>
   *
   * <code>optional string type_name = 6;</code>
   * @return The typeName.
   */
  java.lang.String getTypeName();
  /**
   * <pre>
   * For message and enum types, this is the name of the type.  If the name
   * starts with a '.', it is fully-qualified.  Otherwise, C++-like scoping
   * rules are used to find the type (i.e. first the nested types within this
   * message are searched, then within the parent, on up to the root
   * namespace).
   * </pre>
   *
   * <code>optional string type_name = 6;</code>
   * @return The bytes for typeName.
   */
  com.google.protobuf.ByteString
      getTypeNameBytes();

  /**
   * <pre>
   * For extensions, this is the name of the type being extended.  It is
   * resolved in the same manner as type_name.
   * </pre>
   *
   * <code>optional string extendee = 2;</code>
   * @return Whether the extendee field is set.
   */
  boolean hasExtendee();
  /**
   * <pre>
   * For extensions, this is the name of the type being extended.  It is
   * resolved in the same manner as type_name.
   * </pre>
   *
   * <code>optional string extendee = 2;</code>
   * @return The extendee.
   */
  java.lang.String getExtendee();
  /**
   * <pre>
   * For extensions, this is the name of the type being extended.  It is
   * resolved in the same manner as type_name.
   * </pre>
   *
   * <code>optional string extendee = 2;</code>
   * @return The bytes for extendee.
   */
  com.google.protobuf.ByteString
      getExtendeeBytes();

  /**
   * <pre>
   * For numeric types, contains the original text representation of the value.
   * For booleans, "true" or "false".
   * For strings, contains the default text contents (not escaped in any way).
   * For bytes, contains the C escaped value.  All bytes &gt;= 128 are escaped.
   * </pre>
   *
   * <code>optional string default_value = 7;</code>
   * @return Whether the defaultValue field is set.
   */
  boolean hasDefaultValue();
  /**
   * <pre>
   * For numeric types, contains the original text representation of the value.
   * For booleans, "true" or "false".
   * For strings, contains the default text contents (not escaped in any way).
   * For bytes, contains the C escaped value.  All bytes &gt;= 128 are escaped.
   * </pre>
   *
   * <code>optional string default_value = 7;</code>
   * @return The defaultValue.
   */
  java.lang.String getDefaultValue();
  /**
   * <pre>
   * For numeric types, contains the original text representation of the value.
   * For booleans, "true" or "false".
   * For strings, contains the default text contents (not escaped in any way).
   * For bytes, contains the C escaped value.  All bytes &gt;= 128 are escaped.
   * </pre>
   *
   * <code>optional string default_value = 7;</code>
   * @return The bytes for defaultValue.
   */
  com.google.protobuf.ByteString
      getDefaultValueBytes();

  /**
   * <pre>
   * If set, gives the index of a oneof in the containing type's oneof_decl
   * list.  This field is a member of that oneof.
   * </pre>
   *
   * <code>optional int32 oneof_index = 9;</code>
   * @return Whether the oneofIndex field is set.
   */
  boolean hasOneofIndex();
  /**
   * <pre>
   * If set, gives the index of a oneof in the containing type's oneof_decl
   * list.  This field is a member of that oneof.
   * </pre>
   *
   * <code>optional int32 oneof_index = 9;</code>
   * @return The oneofIndex.
   */
  int getOneofIndex();

  /**
   * <pre>
   * JSON name of this field. The value is set by protocol compiler. If the
   * user has set a "json_name" option on this field, that option's value
   * will be used. Otherwise, it's deduced from the field's name by converting
   * it to camelCase.
   * </pre>
   *
   * <code>optional string json_name = 10;</code>
   * @return Whether the jsonName field is set.
   */
  boolean hasJsonName();
  /**
   * <pre>
   * JSON name of this field. The value is set by protocol compiler. If the
   * user has set a "json_name" option on this field, that option's value
   * will be used. Otherwise, it's deduced from the field's name by converting
   * it to camelCase.
   * </pre>
   *
   * <code>optional string json_name = 10;</code>
   * @return The jsonName.
   */
  java.lang.String getJsonName();
  /**
   * <pre>
   * JSON name of this field. The value is set by protocol compiler. If the
   * user has set a "json_name" option on this field, that option's value
   * will be used. Otherwise, it's deduced from the field's name by converting
   * it to camelCase.
   * </pre>
   *
   * <code>optional string json_name = 10;</code>
   * @return The bytes for jsonName.
   */
  com.google.protobuf.ByteString
      getJsonNameBytes();

  /**
   * <code>optional .opensergo.api.FieldOptions options = 8;</code>
   * @return Whether the options field is set.
   */
  boolean hasOptions();
  /**
   * <code>optional .opensergo.api.FieldOptions options = 8;</code>
   * @return The options.
   */
  com.alibaba.opensergo.api.proto.FieldOptions getOptions();
  /**
   * <code>optional .opensergo.api.FieldOptions options = 8;</code>
   */
  com.alibaba.opensergo.api.proto.FieldOptionsOrBuilder getOptionsOrBuilder();

  /**
   * <pre>
   * If true, this is a proto3 "optional". When a proto3 field is optional, it
   * tracks presence regardless of field type.
   * When proto3_optional is true, this field must be belong to a oneof to
   * signal to old proto3 clients that presence is tracked for this field. This
   * oneof is known as a "synthetic" oneof, and this field must be its sole
   * member (each proto3 optional field gets its own synthetic oneof). Synthetic
   * oneofs exist in the descriptor only, and do not generate any API. Synthetic
   * oneofs must be ordered after all "real" oneofs.
   * For message fields, proto3_optional doesn't create any semantic change,
   * since non-repeated message fields always track presence. However it still
   * indicates the semantic detail of whether the user wrote "optional" or not.
   * This can be useful for round-tripping the .proto file. For consistency we
   * give message fields a synthetic oneof also, even though it is not required
   * to track presence. This is especially important because the parser can't
   * tell if a field is a message or an enum, so it must always create a
   * synthetic oneof.
   * Proto2 optional fields do not set this flag, because they already indicate
   * optional with `LABEL_OPTIONAL`.
   * </pre>
   *
   * <code>optional bool proto3_optional = 17;</code>
   * @return Whether the proto3Optional field is set.
   */
  boolean hasProto3Optional();
  /**
   * <pre>
   * If true, this is a proto3 "optional". When a proto3 field is optional, it
   * tracks presence regardless of field type.
   * When proto3_optional is true, this field must be belong to a oneof to
   * signal to old proto3 clients that presence is tracked for this field. This
   * oneof is known as a "synthetic" oneof, and this field must be its sole
   * member (each proto3 optional field gets its own synthetic oneof). Synthetic
   * oneofs exist in the descriptor only, and do not generate any API. Synthetic
   * oneofs must be ordered after all "real" oneofs.
   * For message fields, proto3_optional doesn't create any semantic change,
   * since non-repeated message fields always track presence. However it still
   * indicates the semantic detail of whether the user wrote "optional" or not.
   * This can be useful for round-tripping the .proto file. For consistency we
   * give message fields a synthetic oneof also, even though it is not required
   * to track presence. This is especially important because the parser can't
   * tell if a field is a message or an enum, so it must always create a
   * synthetic oneof.
   * Proto2 optional fields do not set this flag, because they already indicate
   * optional with `LABEL_OPTIONAL`.
   * </pre>
   *
   * <code>optional bool proto3_optional = 17;</code>
   * @return The proto3Optional.
   */
  boolean getProto3Optional();
}
